%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9RD38F.tmp.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: wenjh
%%CreationDate: 2019/10/5, 13:48:49
%%BoundingBox: 0 0 276 174
%%HiResBoundingBox: 0 0 275.8801 173.8467
%%CropBox: 0 0 275.8801 173.8467
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 947 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2019-10-05T13:48:45+08:00"
   xmp:CreateDate="2019-10-05T13:48:45+08:00"
   xmp:MetadataDate="2019-10-05T13:48:45+08:00"
   xmp:CreatorTool="Microsoft® Word 2016"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:da500f6a-e65a-40b7-981f-1fad77ed99fc"
   xmpMM:InstanceID="uuid:58ee3b4a-b361-4c63-a55e-35e322964ffb"
   pdf:Producer="Microsoft® Word 2016">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>python-docx</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -173.847 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 173.847 li
275.88 173.847 li
275.88 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
.84 15.8492 mo
275.18 15.8492 li
275.18 1.78522 li
.84 1.78522 li
cp
eclp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (FDXQRG+Cambria)
%%Title: (FDXQRG+Cambria Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /FDXQRG+Cambria def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2464 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7614 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 19 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
131 <001C60D8A8C9B75378C19F29519F2DAC72D75B146C28374206FE53EDA31
0EB3A671A46C65A11C868334DFCE8FA192E610166819F016D3B159774B8197AF
91B0A47BDE5DF14C425A0223356C2B3ABAD1EA1131B5E66A2108089A3129C9A2
DC31E1C79442AC0365F263768A2A960F11FFBC2F4D65D64DF5FABA4295F58D9E
8DDE24D4A5EE08A613E254F0760853B3FAC26922FFFA5B25B736C5806ADF9AAB
A034E888DC74F8F0B2F172256FD9AE3260A76E48A5EE6A328A9289CE14B1C8F2
AF71523CE0BBD4CECCABF035A296ED7CBB97BCA79C07658A94D193D5CEA26B32
F90EE76621515FAC2B36A6C388B1E2BCCA82920EE92D4F55E207D95A2FB7D> |
150 <001C60D8A8C9B81871A500C9CDAFD707A7685A82FA219FE021834C763DC
DC532659572242F431384250307ADAFD1DFC16F48828FBD9B6A16FF25F16229B
59EE962C6DB9860065FD04846DFE122BD4C4871A2A713CC812A8C4C29DB3B4B8
CEBB7B4468782EF2A91F8811B3B10C1136D9AB0E3E2F12AEA4440E1B35A368EA
EEE79C160A830AF26062D22> |
135 <001C60D8A8C9B75378CE939ED1FC24132CC16FE480D1A3EA8DB03CCC638
4BE17EEFEFAFF08F9B79A2673DF384526E412E9AEF3EA148527CD82A2E75C2E0
D6B42935A8C99D4BFA73E29A874645E24D865B249CE2B24C7AC20404151A6845
150B70880CD1AB691082DFE2DDD21919909C1CCF0C9CDD7F8123E86916044655
738A56DE32426C1EE6EA4F69BF5C88714AC148D30453468F3EBFAED2BE654ABE
38B2725FF2CA68113D4989A29DEEA912985134E7E4C92BC> |
144 <001C60D8A8C9B7EDAF8BF523B7D2205294A9062BEEEE09E3169035C927D
160C6DEC56F2A21B03A79FD52A0404BA425169CB3DB801D2D23AF662F7397400
C65C6509A44C5566DC6E55F506017AD800A30925BE5C710E7687A23F5D2CC5A6
FAB5B85359EDC32320E9A621E9036638ACEBD98FF1D59867FF6D19A7216ED970
E0817486E4EB0B7E6D1A3024C33F1E845E0F7A07DDF303AF9479DC5D91F4D00C
4FCDD709E8FCA4C087E018E46234C1C70D6F503A45AAC369C6CC2B5839DE04D6
3FEFB6E63611EF210464E5008C5371193EF133C8F816BCF5641D8499A2F03761
7660C24E715410B7E36B43DB4BE1B84DF1BFEB221205AF0C96B37CC8E90B7E53
4B7954D7711B922FAB4D968630A7E1266AB5E7B7319095DA85036A7B24ACA542
FC2D90736F73C356891719F33A5451803602246958E933C168338> |
139 <001C60D8A8C9B854D0EFD26594851468A5C876B3DE4CF671172A8D71A05
EE7A02B9F2EFE59287A82ADD423E8A33E4B218ACEFE0209D4CFC89A44DF15119
CE528518D25D3541B5F907E325965E69AEA28FF8F0B201CCA62FABBE567B4076
F40A93AC9C769634480F237B9A2DED92B344675A0E1B1659FED2905017F> |
145 <001C60D8A8C9B7883C34FF2FB4ABF433096DE72A6FBAA57D47EB1A7BA35
111A4CC1857F557BF4025479AECBB61827B09EAEEBF1BB1926F1DEA7184A2161
486E72840D181FF27D231024EC3E9C147EDDDDBDDA6CA8B65070BAA34F4BBBCF
133FC24EB7DB478ACDA5A2B4337AB409B7153382B8932F24C012B023ABDB24CF
5B2F07CE80C215297DB7BE5A7EF481CA8C99A51A8CE9CF17FD4159D293CCEC87
154D3D737EAD7B0EE35F7> |
3 <001C60D8A8C9B88EAF6D> |
149 <001C60D8A8C9B76D61A1CAE9E34564F0D776980C32A2DAE9389A47D310A
44198609CA07144BF79E9C2DD6F2898A819C3B6BAE95D66DAB543633AE3DA9AE
37F4F8F8AD98C3C7E1A7122CFB17A45165E68B511C4CE9F5845E5CB23CE903A7
54D462319C8BBBA1B593C08C996BD8353C034322194D529950E32B6B6FF4505E
32922FFCAB2BF25EC7A7B409EE7805BF8607D81816D8C40B9C303AF42E4EB902
150E4DE0B3F4AEF702669A5C6527B763F9B16B3A4F8B9D66E8C8A56A25B656AB
47CB74B55AABEB83BFCA97A72107E9115740472176D242390DBFC084A45E7918
3DA676EB271C7D0CD731E55CCA9C5B7D052DBB56CA5556145154BF279CCE005A
525305016A640> |
133 <001C60D8A8C9B762804184642007D66ECC17DD199766A604F0BFB26A474
E24DF315EA1F6318863848A105EF22964B3070E6B7856BFA2823DF724749EA76
FB24EFAD0DC55D9BE84E1742FE172F7519A8585E50F3BD4F891FED585DA6F41C
0F09BF59F2E06B0AC488783A874AF56FADD60B51D20DC22164035A5A91789CF8
B6407AF856B7DAA370CBDBDA0346D58B9A0858FF04697B0F9260A14EFE8CF23D
4303518502DFE7F0C5C4194FC612C4C05DBEF03FD4343E6194B38> |
148 <001C60D8A8C9B71DE7D25344136B1E19A0C5249524730A9D722101CFE19
9606C495CFE2A2BC5F614AD7CD3BA0E6229377CB7F4DCF11A4E4E3F7D220C76F
C1152449DD54246A5B94476CD0D191F2155EE7D8F3C5E6EB492FB4EFBAA0897F
3B34B127CCBB86DCBDEA4D2BFF1216C017BCCC928CB52C9A09D457605879D73D
A178B89AE6A6710AD124C0D0FC2BF76FD327F70D62F8CCB17BCE41DC7B32299B
93584FD9C6EBBECD9FAB4A30F716F43D5209C2450E67590D13DE36091AE8AB9C
FB11B> |
483 <001C60D8A8C9B8622A44827F2C60B04AC075C5FB34386A7D3055BE80BBD
3E0508B5C647D> |
882 <001C60D8A8C9B7917E8A7AB31FEDACD572D20F7B91833F9A4898ED62311
9BB2F52465CB6887AB1C54843AD180900E63F1047E4A455B669201A3450AFD4A
F362A2CBFD3F179E85F74E1B0D8DB9E5A157F8F3D7DC6856F244B5023E3850A5
42473FDDCC39B38C8FC522BE50EFAA42E63AE6F8C3687AA29D2BFC3655DFE7F3
4B715418220E76032399DEB9E9DB85F611B2584A28B937444D626C557D0ACDC5
683273F1C8FA5550822D0FA98D8> |
484 <001C60D8A8C9B89F5AD9FDEDEEFF6147C93D7BBA540F32> |
884 <001C60D8A8C9B7917E850769C7DA5ED9DE76CC5C828D99B70F78AFB0844
A581D94D46BC958355704AD1E0AA64BC7E5D1A651807459E5709BCF584893275
2DE6696096C08A1C99CD6B09F1B7AD5AA99149859C21CD8E6C267E73A4F87D3B
786FF87D1542304DA09DB17F4FAE27026018DD2B42B51B0A5FB4DD6C355F0C38
81A8E15E2B1FF65A6BFAF599826DC82DF5806E599BF4A45F57193D4B113F0A42
416365225AE62C55DAB11DEBC647C3E54C3027B734D58B5EDAEB0F6435BEF4E6
5FD7055B19BE26F65> |
886 <001C60D8A8C9B7917E85A45E52E9BC71C23713C6E48048EB5CD904BD6D6
52DF67E8B05F1892DA85CDF2B03E3489AA98AEC7384464EAAD589BDCA0EC6BE4
342760EA02937139FF9D039B2F78B3EF0976238500EB73A9E1D7639A8437A09B
01D0A8C3A53418FC13F0F81B0BBD7C6797765426F45091D1B1B695CD1DAB0949
927138F988D697B2D0C1C686527CA25429EC2A2702A9E4FB5F6> |
887 <001C60D8A8C9B7917E85BA8548DA4EF1BD09F5FD743FE2E4EF55A6C4CF9
17F2E37C57893AC75983BC2D40782C0276120B4CBA4D585AE1553A7E2185DA68
60A71FB038330E658DED27404C6C0EC41A5B6675A450706BAFD4A0CBD4C38F8B
B42285134D2DCA42A7569549D851324A505749ACD47B780A4E51B8C27C2E2303
1EDE2A4D75C9A2945E154C01E14E479194B5F90F09EDC0CC040722BE0B4F807D
BEA62F11227AC97819921209F910D0060627B803979118129D516352708> |
888 <001C60D8A8C9B7917E8A00F64C37789EDE3EB5090A4A00DD08975ECD905
2943BE1B1D835F20534C4E012DE9D20949B8A45745C965EAD6A169F52F8BBFF8
4D9DA61F38E7DD1F5584A1A6BA4FCA288BC2E1025DBD94795BB786A609C833CA
0A540F7A1C6A5028BDBBF16E553E4E38FA49385CA14123F5542BB3484CC9FE90
FD17331CE861913F66D4234C15256FA3A18F3DC832755646FF6E0DB45DA0C942
C2216C7FC510B9B9E4718C55E06FF9496AA46EB1ED930865B01F1799446F1619
D8106DB637AB0BDB736E0FE9EF483ABE3680B79ACB044E1799376340CF340100
EB70320DCBBB0F94377FC4EFB675EA3AD3AAF84D3B2> |
889 <001C60D8A8C9B7917E8AB4CAA1C4FE7B2BCFC831256C408BB9A41DFA5E3
262E8A8F537D00395C8E29117ED7457CEB0F4238861E6E43D2ED7F4C7DBB66A9
9FD1C740467BA8EC7B85B> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /FDXQRG+Cambria-Identity-H /Identity-H 0 [/FDXQRG+Cambria] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [15.96 0 0 -15.96 0 0 ]msf
6 13.2093 mo
(\000\203\000\226\000\226\000\207\000\220\000\226\000\213\000\221\000\220\000\003\000\225\000\205\000\221\000\224\000\207\001\343\000\003\003r\001\344\003t\003v\003w\003r\003x\003t\003r\003y)
[7.78859 5.39444 5.39444 7.78859 8.90565 5.39444 4.43688 8.52274 8.98545 3.51122 6.8148 7.03827 
8.5387 6.60746 7.78859 4.21356 3.51122 8.93761 3.27184 8.84184 8.84186 8.90569 8.84186 8.90569 
8.84186 8.90569 0 ]xsh
grestore
gsave
.84 15.8492 mo
275.18 15.8492 li
275.18 1.78522 li
.84 1.78522 li
cp
eclp
false sop
1 /0 /CSD get_res sepcs
1 sep
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
199.9 13.2093 mo
(\000\003)sh
grestore
.36 1.78925 mo
.84 1.78925 li
.84 1.30927 li
.36 1.30927 li
cp
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
.36 1.78925 mo
.84 1.78925 li
.84 1.30927 li
.36 1.30927 li
cp
ef
.84 1.78925 mo
275.18 1.78925 li
275.18 1.30927 li
.84 1.30927 li
cp
ef
275.18 1.78925 mo
275.66 1.78925 li
275.66 1.30927 li
275.18 1.30927 li
cp
ef
275.18 1.78925 mo
275.66 1.78925 li
275.66 1.30927 li
275.18 1.30927 li
cp
ef
.36 15.8492 mo
.84 15.8492 li
.84 1.78522 li
.36 1.78522 li
cp
ef
275.18 15.8492 mo
275.66 15.8492 li
275.66 1.78522 li
275.18 1.78522 li
cp
ef
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 3 GetGlyphDirectory
138 <001C60D8A8C9B7931D878F75245AF88708B3368D4A70C9A2C2A9CE51357
B31BFDD3CF6D0EC215CB45FEC3A676FF71C6ADB0230CDBA48750125D2A33A51A
659BA82DF66D25DE5D347F3EE39246F584A56B59FEDFBC88D34E85E98F5AC3CB
3179F261A4CB51E3906391B44241889613B5DA2139C36EE2407665B2A5A3905A
D6A1931A859B7FB77DEF46A3E83A3896BF617EB346F33278C3C834A2829C7D4A
7F9D46E86C970B607D4885CC73D1480EBA7BD969630F3060437864459845C54B
EAA4C2B2FA4E190DCC9C33BCB3AA003DAC345CAB5947E116E9A6A61FF513DD44
1DE818771240211DE8D801A86AA76F2627DA96A0EA3B686B27E72F68C4F6F9EE
E60BF1079C81AB3113D917C6B545CB97E8F7BDF4CD7BD00A0458D32A187E0F93
5BA0E3190790D7EE633704F> |
152 <001C60D8A8C9B7A3FADEF0F1D4E3F574CC9ACECB014E0F7040E009D7224
0F198E4DC7C70B5D462B971D354D9DC3279DDA2B88CCD62224CEB5AF1C6A0E15
53B9123353023FC8B764D28E15AD8ED594E47763CCC95972E9B4BDF07699DC32
7DB0D6AE72A749B1A7CC611360D892B08940B70D6900E73E00D30FDFF44F3E26
B0B0EE98E5BCFCD201EB5C6E2938EAC96399967ACE455D32BE7> |
132 <001C60D8A8C9B79815F74B23878FBF5F52494EC7CE8795183EA618D01AC
1F430BCAF161E44BEB9E5064FD7BF7628F47045E36FA393A08FDC738D1CB7212
4A55824CC61B2D2AF825547C3F11EF41DCAD34798A844F9F0A1E58753DC4EA94
9713EF34782A673DCABF41ED74DB03132E8E29C1EADA3EC77987A2AEA2FEC7A2
FD008145DA1C617393EE627A13214E390F791ED84B34799FAF4F958413441D8D
A84F11EE48E1AF64CD93A7112A5BA4E9711ABE664A272B34DECFD6C75DF62140
F6CE79E04B457F57F978E7A8EC43E948805C395D92035AFB96332D2A8C0E6159
8BA4634A6DBB2BB9DE2D5BC241239161B7F4C56> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
6 29.1693 mo
(\000\213\000\003\000\212\000\203\000\230\000\207\000\003\000\204\000\207\000\207\000\220\000\003)
[3.11328 4.42705 6.0941 5.40967 5.51998 5.38759 4.43809 5.88429 5.38759 5.38759 6.16031 0 
]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold Initial
ct_T42Dict begin
-1.109 -0.297 1.371 1.047
 256 array 0 1 255 {1 index exch /.notdef put} for  /ELRBAA+Cambria-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3256bfd837000000cc000000606376
74205a3e55d00000012c0000024e6670676dde1e55760000037c00000c54
676c7966f0688693000070a00000661e68656164f156638100000fd00000
00366868656109b70d170000100800000024686d747846812d460000102c
000028806c6f6361f449d91b000038ac00001c026d61787012530d1c0000
54b0000000206e616d65a6ff58cb000054d0000015b170726570c53c0541
00006a840000061c67646972000000000000000000000000000304cc02bc
00050008059a05330000009c059a0533000001f7006601fe020f02040803
050406030204e00006ff4000045f00000000000000004d53202000200000
208e0639fe390161079a01c72000019f0000000003e00555000000200003
058a000e000005550010002b055500100000043200100000000000000000
03e0001000000000fff0ff9d0000fff000000000fff00000fe52fff00000
00000000000000000000000000000000067d0010033dfff002e00010ffa0
fff000110000000000000000000000000000000000000000000000000000
00000000000000000000080000000800000004000000007d00de00c80000
000000940080006800000098008b003d0060007100000000000000000000
00000000000000000000000000000000000000f500000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000013e0136012d012400a30089013001210118008c
00000000013e0132012800ae0000000000000000007e007500d0009e009c
009100730068010000f200e0008200000062006e00000000000000000071
0000004200420000005a00080000000000000000010e012e00f400000252
00000000000000000000000000000000000000d400cc0000011200f400d0
005e0078004e0096007e00dc00e20000006000ea00e00000000000000000
0000012c00000000012c0000008a009c00a00000008d000000b600000000
006200a0008600a0000000b00064005a000000aa0072004a000000000000
000000000000000006be0008027400100381fff000e000d6000000750055
003e0000000000000000013a012a011e00a8009400e400d40096020400dc
01fa00c000b600f0010e00d400b6008200e001de005a0306007e009600f0
007600d000dcfed8feddfff00449060105a7074b0000405a65645f5e5d5c
5b5a59585554524d4c4b4a4948474644434241403f3e3d3c3b3a39383736
3534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918
17161514131211100f0e0d0c0b0a090807060504030201002c0118b01843
58456ab0194360b00c2344231020b00c4ef04d2fb000121b21231120332f
592d2c0118b0184358b0052bb000134bb0145058b100403859b0062b1b21
231120332f592d2c0118b01843584eb0032510f221b000124d1b2045b004
25b00425234a6164b0285258212310d61bb0032510f221b0001259592d2c
b01a435821211bb00225b0022549b00325b003254a612064b01050582121
211bb00325b0032549b0005058b0005058b8ffe238211bb0003821591bb0
005258b01e38211bb0003821595959592d2c0118b0184358b0052bb00013
4bb0145058b90000ffc03859b0062b1b21231120332f592d2c4e018a10b1
0c194344b00014b1000ce2b00015b90000fff03800b0003cb0282bb00225
10b0003c2d2c0118b0002fb00114f2b00113b001154db000122d2c0118b0
184358b0052bb00013b90000ffe038b0062b1b21231120332f592d2c0118
b018435845646a23456469b01943646060b00c2344231020b00cf02fb000
121b2121208a208a525811331b212159592d2c014bb0c85158b10b0a4323
43650a592d2c004bb0c8515800b10a0b4323430b592d2c00b00c2370b101
0c3e01b00c2370b1020c453ab10200080d2d2cb0122bb0022545b0022545
6ab0408b60b0022523442121212d2cb0132bb0022545b00225456ab8ffc0
8c60b0022523442121212d2cb000b0122b2121212d2cb000b0132b212121
2d2c014bb0c85158b00643b00743650a592d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2cb1000325456854b0
1c4b505a58b0032545b0032545606820b004252344b0042523441bb00325
204568208a2344b00325456860b003252344592d2cb00325204568208a23
44b003254564686560b00425b0016023442d2cb00943588721c01bb01243
588745b0112bb00d2344b00d7ae41b038a45186920b00d23448a8a8720b0
a05158b0112bb00d2344b00d7ae41b21b00d7ae4595959182d2c208a4523
456860442d2c456a422d2c01182f2d2c0118b0184358b00425b004254964
23456469b0408b6120b080626ab00225b00225618cb0194360b00c234421
8a10b00cf6211b21212121592d2c01b0184358b0022545b002254564606a
b00325456a6120b00425456a208a8b65b0042523448cb00325234421211b
20456a4420456a44592d2c012045b00055b018435a584568234569b0408b
6120b080626a208a236120b003258b65b0042523448cb00325234421211b
2121b0192b592d2c018a8a45642345646164422d2cb00425b00425b0192b
b0184358b00425b00425b00325b01b2b01b0022543b04054b0022543b000
545a58b003252045b040614459b0022543b00054b0022543b040545a58b0
04252045b04060445959212121212d2cb0032520b0072587052e23208ab0
0425b00725b0142b1021c4212d2cc02d2c4b525845441b2121592d2cb002
43583ded181bed592d2c4b505845441b2121592d2c01184b52588a2fed1b
212121592d2c4b53234b515a58b003254568b003254568b0032560545821
21211bb00225456860b0032523442121591b212121592d2cb00243583dcd
181bcd592d2cb002435c58462346608a8a462320468a608a61b8ff806223
2010238ab10c0c8a70456020b0005058b00161b8ffba8b1bb0468c59b010
6068013a1b2121212121592d2c2045b0032546524bb013515b58b0022546
206861b00325b003253f2321381b2111592d2c2045b00325465058b00225
46206861b00325b003253f2321381b2111592d2c004bb0c8515800b00743
b006430b592d2c8a10ec2d2cb00c4358211b2046b0005258b8fff0381bb0
103859592d2c20b0005558b8100063b003254564b00325456461b0005358
b0021bb04061b00359254569535845441b2121591b21b0022545b0022545
6164b028515845441b212159592d2c21210c6423648bb84000622d2c21b0
8051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c
6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840006260
23212d2c184b5358b00425b00425496423456469b0408b6120b080626ab0
0225b00225618cb00c2344218a10b00cf6211b218a11231220392f592d2c
b00225b002254964b0c05458b8fff838b008381b2121592d2cb013435803
1b02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb00225
b8fff038b0282b8a102320d023b0102bb0054358c01b3c59201011b00012
012d2cb0482b2d2c01b0022510d023c901b00113b0001410b0013cb00116
2d2c01b00013b001b0032549b0031738b001132d2c4b53234b515a582045
8a60441b2121592d2c184b5358b00425b004254964b00325b00325496468
b0408b6120b080626ab00225b00225618cb00c234421b004251023b00cf6
1bb00425b0042511122320392f59cc21212d2c0118b0184358b005254623
4564611b21b00425b004254a59b00e23442310b00eec2310b00eec2d2cb0
1b435820b0016045b000515820b0016020452068b0005558b0206044211b
212121591b20b0016020452068b0005558b8ffe06044b01c4b50582045b0
2060441b21591b21212159591b21592d2cb0022546206861b00325b00325
3f2321382d2c462346608a8a462320468a608a61b8ff8062232010238ab1
0c0c8a70456020b0005058b00161b8ff808b1bb0818c59683a2d2cb0402a
212d2c2035b001602d2cb0024354584b53234b515a58381b2121591b2121
2121592d2c49b00e23442d2cb0024354584b53234b515a5820458a60441b
2121591b21212121592d2c8a10b002435821b0301ac9181bb0401a18ed59
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb002
435458b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb0
02435458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c
4b52587d1b7a592d2cb1020042b123018851b1400188535a58b910000020
885458b202010243604259b12401885158b920000040885458b202020243
6042b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b202100243604259b9400002
0063b80400885458b202400243604259595959592d2c451868234b515823
20452064b04050587c59688a6059442d2cb00016b00225b0022501b00123
3e00b002233eb10102060cb00a236542b00b234201b001233f00b002233f
b10102060cb006236542b0072342b00116012d2c20b82000628a6023622d
2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed59
21b006255cb006255a58b0092b5920b005254ab0042547b004254760b006
2547b0806361b00225b0005558b00325b00725496359b0082558001b0159
b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b003
2520b0005558631b2159612320b0005558b080631b21b08059b0592bb006
255c586959b00425202010b00048233ab0062658001b0159b0052658b003
252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358b0
0625b00a251bb00925b0072559b00225b00225070cb005256323b0062563
6020b94000040063535821b00426b00426b00a1bb94000040063655158b0
042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092e
b00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b0
052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed
59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b25
c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d25
4961b08062b00525b005250bb00a252338b00625b0062587b00825b00825
0bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa7
23792121212121212121212121212d2c23b0005458b9400000001bb90000
4000598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458
b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b94000
00001bb90000400059b05b2b2d2cb00426b00426080db00426b00426080d
b05b2b2d2c204569442d2c0020b200400325b0062649618b3812342d0001
00000006fae1eb49f82e5f0f3cf5000b080000000000b9e6983d00000000
d62f8569f71ffd9c0afb086000010009000200000000000000010000079a
fe3900000b0af71ffd930afb000100000000000000000000000000000640
054400be0000000001c3000001c300000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000006c5005d00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000448003c04bb002e03c0005b04c70060
043f005b029c003e0429002404c6003a02840049026b000e04bc003a0277
003a071f004904d40049048e005b04c7003c0000000003b1004903ac0051
02ec002504c70040043f00130663001b04340010043f0013000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000284004900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000498
fffa04c200580409005b050500580429005803f600580491005b05370058
02a200580292001b04e9005803e500580600005504db005504dd005b048d
00580000000004bd005803d60059048a003904bb003d047b001106c3001b
047000150459001300000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000002a20058
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000332003e
0382003402d30054038b0057032c00540207003f031c002d038a003d01f6
004701e50019037c003d01ed003d052e00470394004703630054038b003e
0000000002c9004702c5004d023f002e038b0041033a002404b900270324
0019033a0024000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000247009a0247
009a0000fe360000fe350000000000000000000000000000000000000000
0000000001db001800000000000000000000000000000000000000000000
000002ae00b30000000000000000039d005a000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000034400aa0344002b
033c00a2033c002b00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000040b003b000000000203007d0361007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000048c00730334002804050030
040400310000000004190060048c006a00000000048c005f00000000048c
0073048c009d048c0071048c007c00000000048c0098048c006a00000000
048c005f0000000004bd00710353002e043f00370445003f000000000455
006204b0006e0000000004bd00600000000004bd007104bd009e04bd006c
04bd007f0000000004bd009d04bd006e0000000004bd006000000000037f
0060037f007d037f005d037f006a00000000037f007f037f005e00000000
037f0058000000000000000000000000000000000277008502770032037f
0060037f007d037f005d037f006a00000000037f007f037f005e00000000
037f0058000000000000000000000000000000000277008502770032037f
0060037f007d037f005d037f006a00000000037f007f037f005e00000000
037f00580000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000037f0060037f
007d037f005d037f006a00000000037f007f037f005e00000000037f0058
00000000029c003e00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000004b0004200000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000026b000e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000006f006f006f006f006f
006f006f006f006f006f006f006f006f006f006f006f011c011c011c011c
011c011c011c011c011c011c011c011c011c011c011c011c011c011c011c
011c011c011c011c011c011c011c011c011c011c011c011c011c011c011c
011c011c011c011c011c011c011c011c011c011c011c011c011c011c011c
011c011c011c011c011c011c011c011c011c011c011c011c011c011c011c
011c011c011c011c011c011c011c011c011c011c011c011c011c011c011c
011c011c011c011c011c011c011c011c011c011c011c011c011c011c011c
011c011c011c011c011c011c011c011c011c011c011c011c011c011c011c
011c011c011c011c011c011c01e0026202ca036b0400048a058b062406ac
073207e40833091609b20a0e0ab10ab10b4c0bf90c700cf90d600de00e91
0f370f370f370f370f370f370f370f370f370f370f370f370f370f370f37
0f370f370f370f370f370f370f370f370f370f370f370f370f370f370f37
0f370f370f370f370f370f370f370f370f370f370f370f370f370f370f73
0f730f730f730f730f730f730f730f730f730f730f730f730f730f730f73
0f730f730f730f730f730f730f730f730f730f730f730f730f730f730f73
0f730f730f730f730f730f730f730f730f730f730f730f730f730f730f73
0f730f730f730f730f730f730f730f730f730f730f730f730f730f730f73
0f730f730fe1107010bc1118119b1214127c12fb133b13791402145214da
1547158e15f415f4168516f8175117b31803186a18f81963196319631963
196319631963196319631963196319631963196319631963196319631963
196319631963196319631963196319631963196319631963196319631963
196319631963196319631963196319631963197919791979197919791979
197919791979197919791979197919791979197919791979197919791979
197919791979197919791979197919791979197919791979197919791979
197919791979197919791979197919791979197919791979197919791979
19791979197919791979197919791979197919fd1a5a1aa71b131b701bd3
1c971d061d4c1d951e101e471ee91f5b1f9d20132013207120e121312191
21e1224522d2234523452345234523452345234523452345234523452345
234523452345234523452345234523452345234523452345234523452345
234523452345234523452345234523452345234523452345234523452345
234523452345234523452345234523452345234523452345234523452345
23452367237f2388239123912391239123912391239123b723b723b723b7
23b723b723b723db23db23db243424342434243424342434243424342434
243424342434243424342434243424342434243424342434243424342434
24342434243424342434243424342434247a24c025032548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
254825482548254825482548254825482548254825482548254825482548
2548254825482548256325632579259c259c259c259c259c259c259c259c
259c259c259c259c259c259c259c259c259c259c259c259c259c259c259c
259c259c259c259c259c259c259c25a425ed25f525fd25fd2605260d260d
26152615266126a52710278d278d2817288f288f291a291a292229682970
297829782980298829882990299029f32a4d2acf2b862b862c502ce52ce5
2d8e2d8e2dd62e132e782ef42ef42f702fd42fd4304d304d304d304d304d
309430d230e230eb30f430fd30fd3106310f310f31183118311831183118
3121312a3139314731553163316331713180318031903190319031903190
319031903190319031903190319031903190319031903190319031903190
319031903190319031903190319031903190319031903190319031903190
3190319f31ad31bb31c931c931d731e631e631f631f63259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
325932593259325932593259325932593259325932593259325932593259
3259325932593259325932de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de32de32de32de32de32de32de32de32de32de32de32de32de
32de32de32de330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f330f330f330f330f330f330f
330f330f330f330f330f330f330f330f330f0000000100000e00005a0004
003c000400020010002f0066000003d20c54000200010000002f023a0000
00000000000d03880000000000000000000e006c03880000000300000000
006403f40000000300000001000e0458000000030000000200080b880000
000300000003002e0b62000000030000000400180b780000000300000005
00180b90000000030000000600180ba8000000030000000700760bc00000
000300000008002a0402000000030000000900460c36000000030000000a
070a0458000000030000000b00560c7c000000030000000c00280cd20000
00030000000d03880000000000030000000e006c03880001000000000000
00320cfa000100000000000100070d2c0001000000000002000410c40001
000000000003001710b10001000000000004000c10bc0001000000000005
000c10c80001000000000006000c10d40001000000000007003b10e00001
00000000000800150d0100010000000000090023111b000100000000000a
03850d2c000100000000000b002b113e000100000000000c001411690001
00000000000d01c4117d000100000000000e003613410003000104090000
006403f40003000104090001000e0458000300010409000200080b880003
000104090003002e0b62000300010409000400180b780003000104090005
00180b90000300010409000600180ba8000300010409000700760bc00003
000104090008002a0402000300010409000900460c36000300010409000a
070a0458000300010409000b00560c7c000300010409000c00280cd20003
00010409000d03880000000300010409000e006c0388004d006900630072
006f0073006f0066007400200073007500700070006c0069006500640020
0066006f006e0074002e00200059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
0020006300720065006100740065002c00200064006900730070006c0061
0079002c00200061006e00640020007000720069006e007400200063006f
006e00740065006e00740020006100730020007000650072006d00690074
00740065006400200062007900200074006800650020006c006900630065
006e007300650020007400650072006d00730020006f0072002000740065
0072006d00730020006f00660020007500730065002c0020006f00660020
0074006800650020004d006900630072006f0073006f0066007400200070
0072006f0064007500630074002c00200073006500720076006900630065
002c0020006f007200200063006f006e00740065006e007400200069006e
0020007700680069006300680020007400680069007300200066006f006e
0074002000770061007300200069006e0063006c0075006400650064002e
00200059006f00750020006d006100790020006f006e006c007900200028
0069002900200065006d0062006500640020007400680069007300200066
006f006e007400200069006e00200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
002000740068006500200065006d00620065006400640069006e00670020
007200650073007400720069006300740069006f006e007300200069006e
0063006c007500640065006400200069006e002000740068006900730020
0066006f006e0074003b00200061006e0064002000280069006900290020
00740065006d0070006f0072006100720069006c007900200064006f0077
006e006c006f006100640020007400680069007300200066006f006e0074
00200074006f002000610020007000720069006e0074006500720020006f
00720020006f00740068006500720020006f007500740070007500740020
00640065007600690063006500200074006f002000680065006c00700020
007000720069006e007400200063006f006e00740065006e0074002e0020
0041006e00790020006f0074006800650072002000750073006500200069
0073002000700072006f0068006900620069007400650064002e00680074
00740070003a002f002f007700770077002e006d006900630072006f0073
006f00660074002e0063006f006d002f007400790070006f006700720061
007000680079002f0066006f006e00740073002f00640065006600610075
006c0074002e006100730070007800a9002000320030003100370020004d
006900630072006f0073006f0066007400200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200072006900670068
00740073002000720065007300650072007600650064002e00430061006d
006200720069006100200068006100730020006200650065006e00200064
0065007300690067006e0065006400200066006f00720020006f006e002d
00730063007200650065006e002000720065006100640069006e00670020
0061006e006400200074006f0020006c006f006f006b00200067006f006f
00640020007700680065006e0020007000720069006e0074006500640020
0061007400200073006d0061006c006c002000730069007a00650073002e
002000490074002000680061007300200076006500720079002000650076
0065006e002000730070006100630069006e006700200061006e00640020
00700072006f0070006f007200740069006f006e0073002e002000440069
00610067006f006e0061006c00200061006e006400200076006500720074
006900630061006c00200068006100690072006c0069006e006500730020
0061006e0064002000730065007200690066007300200061007200650020
00720065006c00610074006900760065006c00790020007300740072006f
006e0067002c0020007700680069006c006500200068006f00720069007a
006f006e00740061006c0020007300650072006900660073002000610072
006500200073006d0061006c006c00200061006e006400200069006e0074
0065006e006400200074006f00200065006d00700068006100730069007a
00650020007300740072006f006b006500200065006e00640069006e0067
007300200072006100740068006500720020007400680061006e00200073
00740061006e00640020006f007500740020007400680065006d00730065
006c007600650073002e002000540068006900730020007000720069006e
006300690070006c00650020006900730020006d006f007300740020006e
006f007400690063006500610062006c006500200069006e002000740068
00650020006900740061006c006900630073002000770068006500720065
00200074006800650020006c006f00770065007200630061007300650020
006300680061007200610063007400650072007300200061007200650020
007300750062006400750065006400200069006e0020007300740079006c
006500200074006f00200062006500200061007400200074006800650069
00720020006200650073007400200061007300200065006c0065006d0065
006e007400730020006f006600200077006f00720064002d0069006d0061
006700650073002e0020005700680065006e002000430061006d00620072
006900610020006900730020007500730065006400200066006f00720020
00630061007000740069006f006e0073002000610074002000730069007a
006500730020006f00760065007200200032003000200070006f0069006e
0074002c0020007400680065002000200069006e007400650072002d0063
00680061007200610063007400650072002000730070006100630069006e
0067002000730068006f0075006c006400200062006500200073006c0069
006700680074006c00790020007200650064007500630065006400200066
006f00720020006200650073007400200072006500730075006c00740073
002e0020005400680065002000640065007300690067006e002000690073
006e002700740020006a00750073007400200069006e00740065006e0064
0065006400200066006f007200200062007500730069006e006500730073
00200064006f00630075006d0065006e00740073003a0020005400680065
00200072006500670075006c006100720020007700650069006700680074
00200068006100730020006200650065006e00200065007800740065006e
00640065006400200077006900740068002000610020006c006100720067
006500200073006500740020006f00660020006d00610074006800200061
006e006400200073006300690065006e00630065002000730079006d0062
006f006c0073002e002000540068006500200047007200650065006b0020
0061006e006400200043007900720069006c006c00690063002000680061
00730020006200650065006e002000640065007300690067006e00650064
00200075006e00640065007200200063006c006f00730065002000730075
0070006500720076006900730069006f006e0020006f006600200061006e
00200069006e007400650072006e006100740069006f006e0061006c0020
007400650061006d0020006f006600200065007800700065007200740073
002c002000770068006f002000610069006d0065006400200074006f0020
0073006500740020006100200068006900730074006f0072006900630061
006c0020006e006500770020007300740061006e00640061007200640020
0069006e0020006d0075006c00740069002d007300630072006900700074
00200074007900700065002000640065007300690067006e002e004d0069
00630072006f0073006f00660074003a002000430061006d006200720069
006100200042006f006c006400560065007200730069006f006e00200036
002e0039003800430061006d0062007200690061002d0042006f006c0064
00430061006d006200720069006100200069007300200061002000740072
006100640065006d00610072006b0020006f006600200074006800650020
004d006900630072006f0073006f00660074002000670072006f00750070
0020006f006600200063006f006d00700061006e006900650073002e004d
006f006e006f007400790070006500200049006d006100670069006e0067
00200061006e00640020005400690072006f002000540079007000650077
006f0072006b00730068007400740070003a002f002f007700770077002e
006d006900630072006f0073006f00660074002e0063006f006d002f0074
00790070006f006700720061007000680079002f006300740066006f006e
007400730068007400740070003a002f002f007700770077002e0066006f
006e00740073002e0063006f006da92032303137204d6963726f736f6674
20436f72706f726174696f6e2e20416c6c20726967687473207265736572
7665642e43616d6272696120686173206265656e2064657369676e656420
666f72206f6e2d73637265656e2072656164696e6720616e6420746f206c
6f6f6b20676f6f64207768656e207072696e74656420617420736d616c6c
2073697a65732e204974206861732076657279206576656e207370616369
6e6720616e642070726f706f7274696f6e732e20446961676f6e616c2061
6e6420766572746963616c20686169726c696e657320616e642073657269
6673206172652072656c61746976656c79207374726f6e672c207768696c
6520686f72697a6f6e74616c207365726966732061726520736d616c6c20
616e6420696e74656e6420746f20656d70686173697a65207374726f6b65
20656e64696e677320726174686572207468616e207374616e64206f7574
207468656d73656c7665732e2054686973207072696e6369706c65206973
206d6f7374206e6f7469636561626c6520696e20746865206974616c6963
7320776865726520746865206c6f77657263617365206368617261637465
727320617265207375626475656420696e207374796c6520746f20626520
6174207468656972206265737420617320656c656d656e7473206f662077
6f72642d696d616765732e205768656e2043616d62726961206973207573
656420666f722063617074696f6e732061742073697a6573206f76657220
323020706f696e742c207468652020696e7465722d636861726163746572
2073706163696e672073686f756c6420626520736c696768746c79207265
647563656420666f72206265737420726573756c74732e20546865206465
7369676e2069736e2774206a75737420696e74656e64656420666f722062
7573696e65737320646f63756d656e74733a2054686520726567756c6172
2077656967687420686173206265656e20657874656e6465642077697468
2061206c6172676520736574206f66206d61746820616e6420736369656e
63652073796d626f6c732e2054686520477265656b20616e642043797269
6c6c696320686173206265656e2064657369676e656420756e6465722063
6c6f7365207375706572766973696f6e206f6620616e20696e7465726e61
74696f6e616c207465616d206f6620657870657274732c2077686f206169
6d656420746f20736574206120686973746f726963616c206e6577207374
616e6461726420696e206d756c74692d7363726970742074797065206465
7369676e2e4d6963726f736f66743a2043616d6272696120426f6c645665
7273696f6e20362e393843616d627269612d426f6c6443616d6272696120
697320612074726164656d61726b206f6620746865204d6963726f736f66
742067726f7570206f6620636f6d70616e6965732e4d6f6e6f7479706520
496d6167696e6720616e64205469726f2054797065776f726b7368747470
3a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068
792f6374666f6e7473687474703a2f2f7777772e666f6e74732e636f6d4d
6963726f736f667420737570706c69656420666f6e742e20596f75206d61
7920757365207468697320666f6e7420746f206372656174652c20646973
706c61792c20616e64207072696e7420636f6e74656e7420617320706572
6d697474656420627920746865206c6963656e7365207465726d73206f72
207465726d73206f66207573652c206f6620746865204d6963726f736f66
742070726f647563742c20736572766963652c206f7220636f6e74656e74
20696e207768696368207468697320666f6e742077617320696e636c7564
65642e20596f75206d6179206f6e6c792028692920656d62656420746869
7320666f6e7420696e20636f6e74656e74206173207065726d6974746564
2062792074686520656d62656464696e67207265737472696374696f6e73
20696e636c7564656420696e207468697320666f6e743b20616e64202869
69292074656d706f726172696c7920646f776e6c6f616420746869732066
6f6e7420746f2061207072696e746572206f72206f74686572206f757470
75742064657669636520746f2068656c70207072696e7420636f6e74656e
742e20416e79206f74686572207573652069732070726f68696269746564
2e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f
6772617068792f666f6e74732f64656661756c742e61737078000000b900
20011eb40918014a20b8011db40918014a20b8011cb40918014a20b80117
b40918014a20b80116b40918014a20b80112b40918014a20b80111b40918
014a20b8010fb40918014a20b8010db40918014a20b8010ab40918014a20
b80109b40918014a20b80108b40918014a20b80106b40918014a20b80105
b40918014a20b8010440e90918014a20fb0918014a20fa0918014a20ea09
18014a20e40918014a20e30918014a20e10918014a20de0918014a20d809
18014a20d30918014a20cd0918014a20cc0918014a20c90918014a20c809
18014a20c60918014a20c40918014a20c20918014a20c00918014a20bd09
18014a20b10918014a20af0918014a208c0918014a208b0918014a208a09
18014a20890918014a20860918014a20850918014a20840918014a208309
18014a20820918014a20810918014a20800918014a207f0918014a207e09
18014a207d0918014a20510918014a20500918014a20490918014a204809
18014a2f412f0126003f0126004f0126005f0126006f0126007f0126008f
0126009f012600af012600bf012600cf0126000b001f0124002f0124003f
0124004f0124005f0124006f0124007f0124008f0124009f012400af0124
00bf0124000b00200123407801dfe016171cd4d516171c7b7c161b7b7c19
d1d216171c767716171c6d7016171c6c6f16171c6b6e161b6b6e7f721a74
7514151c676a14151c666914151c6568141b656885711a1973167a431921
7943192107c717c702e7e8012b74b30117be0127d660be70be80be04999a
022b409a015f93019192022bb8fff04010eb1b1d3909631863c763032063
0d0f39b8fff0402c471f253910aa657e399e98231f1897262a399798012b
4898019695022b10953f4039d995010bb01bb084b003410d010701050000
002b010601050000002b010401050000002b010540498a002b8b8a002b89
8a002b8a85062b817f012b7d7e052b7e84221f8885012b8785012b848505
2b8385052b1b37151836151535151234150f33150c321509311506301503
2f15002e15b801204080433e2126270e28270f0f2a0128f8ff2bf8f90ff6
f70ef4f50e30f630f802f0f8012a2b0e2c2b0f22230e24230f1e1f0e201f
0f0f10110c090a0b0c0607080c0304050c0001020c0603641f0b0f4b0f02
0b003b004403660974038709ab00a609db0f090b000b030b0f3b003b0959
035b097603740f9b009b09990fb909da000eb90121012240120f1b011d0d
18071a0d1510170d1204140d1f410e012100010000012100100121002f01
21003f0121009f012100bf01214026062c3c2a3c283c263c243c223c203c
1e3c1b3c183c153c123c0f3c093c063c033c003c50335401b0124b004b54
42b013014b004b5342b0332b4bb8032052b0322b4bb009505b58b101018e
59b0332bb00288b8010054b00488b8020054b012435a5b58b80119b10101
8e851bb900010100b04b60858d592b2b1db0644b5358b0801d59b0324b53
58b0901d59004bb03251b01b23422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b73742b2b2b2b2b7374752b2b2b2b2b2b2b2b2b2b2b2b73b0f445b0f845
6961b0f82344b0f64569b0f84560b0f62344732b2b2b2b73b02a45b02c45
61b0284560b02623442b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b7300742b2b742b2b2b2b2b2b742b2b73732b7374732b74
2b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb109322b4b
b0505242b002435c4bb064524bb01b505b60b01a23424bb0c8524bb03650
5bb00c2342737373b100024354b102024354b1060243545b5b58411d011e
0064011d0064011c006401170064011600640112006401110064010f0064
010d0064010a0064010900640108006401060064010500640104404d64fb
64fa64ea64e464e364e164de64d864d364cd64cc64c964c864c664c464c2
64c064bd64b164af648c648b648a64896486648564846483648264816480
647f647e647d6451645064496448642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b00>
[15393 10751 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2324 137 <00030024fe40041d03f00033003f004f0121b10102435558405940204e27
0a082f0837033798400308082f10010032320003004740320f2f3d033d98
402f10104e030f4e1f4e2f4e0317034e400e12484e40101846034698181c
491405431d0c23401d232a010232032a0005853a3a5134842a01182fe112
392ff1c612173910c4c41a10cd10cd10d4cd003fed2b00182f1acd2b5f5e
5d2b00183f1aed2b00183f1aed2b11120039111239182f391aed2b111200
393911333331301b404140204e270a082f0837033798400308082f100100
32320003004740320f2f3d033d98402f10104e030f4e1f4e2f4e0317034e
400e12484e4010184603469840181c00183f1aed2b00182f1acd2b5f5e5d
2b00183f1aed2b00183f1aed2b11120039111239182f391aed2b11120039
391133333130590127071616151406232227061514161633333216151406
0623222e023534363726263534363637262635343e023332161721011416
33323635342623220603060615141633323635342626232322041dab041c
25d3cd633f32193c37f8a7a679e29b71b8824748412a262741344e504375
9f5c334e250169fd5d474c454947494a472424257d877e83184640ac4903
5a130b1c6144aeb4122d341e201182896b9a5114355c473960221e4e392f
5243282c8f605d8554270a06febf7e7b72757b8173fcaa1c422b4845544c
22302000>ELRBAA+Cambria-Bold AddT42Char 
1 3144 139 <000200490000023d056f0003001b00b4b101024355584039030203036340
0f024f0202ff02010f02bf02df02ff020409000210020210030211aa0f0f
0ea7440f0f19041b04a7441b011202128408081d1c11120139182fe1c410
c4002f2b110033183f2b001810e52f5f5e5d5e5d71721aed2b31301b4030
0302030363400f024f0202ff02010f02bf02df02ff020409000210020210
030211aa0f0f0ea7440f0f19041b04a7441b00182f2b110033183f2b0018
10e52f5f5e5d5e5d71721aed2b31305901152135033e023511342e022735
253311141e0417152101d1feee6a31250d09192b2201137d03060b12221c
fe18056ff5f5fad30d2a485f01d1313c2413074408fd39383d211a161207
4200>ELRBAA+Cambria-Bold AddT42Char 
1 4652 144 <000100490000049503f000390095b10102435558402b170239031a191aa7
4401191527aa252524a744250f28110e2d0e030e95402d10338406063b1e
282713841e01182fe111331112392fe1003f1aed2b11003333183f2b0018
10e53f332b1100173331301b4020170239031a191aa74401191527aa2525
24a744250f28110e2d0e030e95402d1000183f1aed2b11003333183f2b00
1810e53f332b110017333130592121353e023511342e0423220606151114
1616171521353e023511342e022735253307173e0233321e021511141e03
170495fe1b2e240d060d171c241c2652380c252ffe1d30250d0513273001
127e0f0c3e5e6739526c431d030c15261b420b2b495f010b475b3a27190c
2f532ffe7f5f4a2b0b42420d2a485f019b4a472b1b0a44089003373f252f
5a8256fe922c4d2e1d140700>ELRBAA+Cambria-Bold AddT42Char 
1 5784 149 <00010051fff0035a03f0002f00d3b10102435558b90023ffe8b70910480a
23231323b8ffe840310910480a232303171340131c031c981310002f010b
032f2c402c030303982c16181717271f850f0f2e278506063100402e0118
2f1acd12392fe112392fe111392fcd003fed2b001a1810cd5f5e5d3fed2b
001a1810cd123911332b113911332b31301bb90023ffe8b70910480a2323
1323b8ffe840210910480a232303171340131c031c981310002f010b032f
2c402c03030398402c1600183f1aed2b001a1810cd5f5e5d3fed2b001a18
10cd123911332b113911332b31305913161633323635342626272e033534
36363332161715232e0223220615141616171e0215140e0223222735d718
68574b4d2351623761482a68c17c498c6f841737422e424e1c48675e763e
3c6c975ba5ca010e5b5b4441293a352b183a495a375a84460c14e940461b
3c362636332b27556f4a51754c252fef>ELRBAA+Cambria-Bold AddT42Char 
1 6368 151 <00010040fff0048a03e0002d008bb101024355584027112d1200002da744
000f03082f1caa1a0b1d1e030721070307954021161d1c14840b0b2f0284
2501182fe112392fe13333003f1aed2b11001733182fe51112393f2b1100
33113331301b401d112d1200002da744000f03082f1caa1a0b1d1e030721
0703079540211600183f1aed2b11001733182fe51112393f2b1100331133
313059132111141e02333236363511342e0227352111141e021715052337
270606232226263511342e04274001850c22312625523906112429018605
12282ffef079090c5d924a6a7f3803060b13211c03e0fdd5606c3f1d2e53
2f01824947281b0c42fd444c462a1b0a4309900356444f9979016e383c21
1b161207>ELRBAA+Cambria-Bold AddT42Char 

1 0 3 <> ELRBAA+Cambria-Bold AddT42Char 
1 0 0 <000400be0000048605540028002c00300034003e401d270000292c1d0b32
2d2c0b2d2d0b2c03362f34130e182f34002c2a2d32002fddd6ddc62fddd6
ddc6012fcd1217392f2f2f10cd10cd10cd332fcd30310135343e02373e03
35342623220e02072335363633321e0215140e02070e0315151715233501
11211101112111023706162a2417261b0f413e2030241909603c89434663
3e1c0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f
3339234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1
fee4049afb6604f7faac0554>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/g 137 def
/i 139 def
/n 144 def
/s 149 def
/u 151 def
/space 3 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 115 /s put
dup 117 /u put
dup 127 /space put
pop
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold /ELRBAA+Cambria-Bold findfont ct_VMDictPut
/FDXQRH+Cambria-Bold*1 
[103{/.notdef}rp /g /.notdef /i 4{/.notdef}rp /n 4{/.notdef}rp /s 
/.notdef /u 9{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [12.96 0 0 -12.96 0 0 ]msf
67.704 29.1693 mo
(using\177)
[7.68528 5.98752 4.06938 7.82789 6.73925 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 4040 142 <0001003a00000230059800170050b1010243555840151514a74415001701
04070607a7440600840d0d191811120139182fe1002f2b110033183f3f2b
31301b400f1514a7441500170104070607a7440600182f2b110033183f3f
2b31305901141616171521353e043511342e032735253301cc0c2533fe16
1e22130e04030915262a01157d01215f482b0d4242071319274540030c56
5137211408420e00>ELRBAA+Cambria-Bold AddT42Char 
1 4964 145 <0002005bfff0043303f0000f001e0057b101024355584018001303139840
0016091b031b984009100c8318182010830401182fe112392fe1003f1aed
2b00183f1aed2b31301b40100013031398400016091b031b984009100018
3f1aed2b00183f1aed2b3130590522262635343e02333216151406060114
1633323e0235342623220606023b93d5784a84b76bf2f67ae2feb45f6035
472b125f5d4452261067e3af86c4803dfff6aeeb72020fd4d336668f59d7
d556ac00>ELRBAA+Cambria-Bold AddT42Char 
1 6848 153 <0001001bfff6066203e000250083b10102435558402c0b1c1f0308131d01
050e192307090908a744090f001215030325001514130103021201121503
08191f270e0801182f3310c632111739113333113333113333002f17333f
2b1100173311173331301b40190b1c1f0308131d01050e192307090908a7
44090f001215030300182f17333f2b110017331117333130590503032303
2e022735211506061514161713133313133636353426273521150e030701
03e9bcdbcaf3161e262001e92f2f100a7de6bac283140f302c01791e211d
2523fef30a0285fd7b02f9463f23074242082925193d22fe6102affd5101
69364a1c2a3707424309182a5059fd4d>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/l 142 def
/o 145 def
/w 153 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 108 /l put
dup 111 /o put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[103{/.notdef}rp /g /.notdef /i 2{/.notdef}rp /l /.notdef /n 
/o 3{/.notdef}rp /s /.notdef /u /.notdef /w 7{/.notdef}rp 
/space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [18 0 0 -18 0 0 ]msf
105.53 29.1693 mo
(wilson\177)
[14.3641 5.65192 5.54398 8.26199 10.242 10.8721 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 1750 135 <0002005bfff003f903f00019002000bfb10102435558403a201303209840
7013010f131f134f135f1304160313130a030a1d031d98400a100019010b
0319030316031695400316190012841a1a222013840601182fe13212392f
f1c632003f1aed2b001810c45f5e5d3f1aed2b11120039182f5f5e5d5d1a
ed2b31301b402f2013032098407013010f131f134f135f1304160313130a
030a1d031d98400a100019010b031903031603169540031600183f1aed2b
001810c45f5e5d3f1aed2b11120039182f5f5e5d5d1aed2b313059250606
232226353436363332161617161716172116163332363703262623220607
03df66c882e9eb79de935b89622026131401fd86017f824c7a47bd044850
4d5b09b66c5afffba2eb792a4b353f515376b5ab3948014b99969c93>ELRBAA+Cambria-Bold AddT42Char 
1 3416 140 <0002000efe4501cc056f0003001700b8b10102435558403b030203036340
0f024f0202ff02010f02bf02df02ff020409000210020210030217aa1515
14a744150f090a030a9740091c0104020a04840e0e191811120139182fe1
c6c410c4003f1aed2b00183f2b001810e52f5f5e5d5e5d71721aed2b3130
1b40310302030363400f024f0202ff02010f02bf02df02ff020409000210
020210030217aa151514a744150f090a030a9740091c00183f1aed2b0018
3f2b001810e52f5f5e5d5e5d71721aed2b3130590115213501140e020727
3e023511342e022735253301c4feee011a2961ae5630433e1c09192b2201
137d056ff5f5fae076a37c5d18751b38574c0341313c241307440800>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/e 135 def
/j 140 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 101 /e put
dup 106 /j put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[101{/.notdef}rp /e /.notdef /g /.notdef /i /j /.notdef 
/l /.notdef /n /o 3{/.notdef}rp /s /.notdef /u 
/.notdef /w 7{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
168.91 29.1693 mo
(jones\177)
[4.24011 7.98875 8.52234 7.45532 6.44435 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 960 132 <0002002efff0045b0598001a00280089b1010243555840270706a7440709
010a0b2803240f24032495400f10161e03181e984016161a128321212a0a
1b841a01182fe13212392fe1002f3f1aed392b00183f1aed2b1100173318
3fc52b31301b401e0706a7440709010a0b2803240f24032495400f10161e
03181e984016161a00182f3f1aed392b00183f1aed2b11001733183fc52b
31305913342e032735253311173e02333216151406062322270727011416
33323635342623220606159f020a16252a01177b013c5a663ab2b269d098
9e834a80012155595c61565b2c5638043f484c38201409420efdc301373c
23fbfaade97539391201467b75c1b3c5c22e5533>ELRBAA+Cambria-Bold AddT42Char 
1 1428 134 <00020060fff0048a05980020002f00b3b1010243555840351e1da7441e00
2001142403249840141006080308aa060605a7440606090a2f032b0d2b03
2b95400d160809170300842f2f3128831001182fe112392fe11733003f1a
ed2b11001733182f2f2b001810e52b00183f1aed2b00183f3f2b31301b40
291e1da7441e002001142403249840141006080308aa060605a744060609
0a2f032b0d2b032b95400d1600183f1aed2b11001733182f2f2b001810e5
2b00183f1aed2b00183f3f2b31305901141e021715052337270606232226
353436363332161735342e02273525330134262322060615141633323636
35041c0512282ffef079090f489f49b6b56ed9992c553a0613263201157d
fedf52553e592d565b2b553a01244c462a1b0a43099001494ffafbaae978
0b105b6b592f1a0a430efd007a7659a873c5c22b593a>ELRBAA+Cambria-Bold AddT42Char 
1 5474 148 <000100490000039503f0002600c0b10102435558403811010b0008100802
0903080440020b120b220b031104040b030b9540041026aa242423a74424
0f16191819a744180840070728260012841d01182fe1323212392f1acd00
2f2b110033183f2b001810e53f1aed2b005f5e5d1a1810cd5f5e5d113333
31301b402e11010b00081008020903080440020b120b220b031104040b03
0b9540041026aa242423a744240f16191819a7441800182f2b110033183f
2b001810e53f1aed2b005f5e5d1a1810cd5f5e5d11333331305901173636
3332171123262623220e031511141616171521353e023511342e02273525
3301cb0d499a5a3d43b511372e16352d13060e2a32fe1330250d05132730
01127e035103564c0dfeec3a3e1b31333434fec15f4c2b0942420d2a485f
019b4a472b1b0a440800>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/b 132 def
/d 134 def
/r 148 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 98 /b put
dup 100 /d put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[98{/.notdef}rp /b /.notdef /d /e /.notdef /g /.notdef 
/i /j /.notdef /l /.notdef /n /o 2{/.notdef}rp 
/r /s /.notdef /u /.notdef /w 7{/.notdef}rp /space 
128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [17.04 0 0 -17.04 0 0 ]msf
209.62 29.1693 mo
(binders\177)
[10.0707 5.28233 10.2922 10.1047 9.04834 7.85541 7.70209 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 1 GetGlyphDirectory
136 <001C60D8A8C9B83D5FF244A31CC74AF6A638BC358204A28A37303F17180
6EDCA4FDA148A2A0DADACDF692043DD86137577E3D464602103498211EB7F082
45591CF0AFF152E0AEF45C96A164E2AA1E0589E80EA0282F0515FC7A9FE96901
41B610F982DDFA48E8E0D6F551C4412E2B342014ABB59BD0B2E289FF3181CCEE
1F2B75DD12F34E3736D081145874D933BFCF991209F4F895E33642616C14D93B
F0DD14FD7B33C132166CDE6BC246F79FE7A6F6D4627CF38F56C9332363DC01F2
DB30733B504E81B75C4A0A561DB34F1E41EC5787A4136F6E3DACECC2AA245> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
6 46.4493 mo
(\000\210\000\221\000\224\000\003)
[3.34505 5.8623 4.57058 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 568 131 <0002003cfff0041003f00028003300f0b10102435558404d0b2903299e40
400b500b02700b010b0b040f151f157f15030a03151b1b10031098401b10
2826a74428000133032f002f102f021404042f032f96041600010b280420
84333335081440152c850801182fe1d41acd1112392fe11733003fed2b00
5f5e5d111733182f2b00183f1aed2b001810c45f5e5d12392f5d711aed2b
31301b403d0b2903299e40400b500b02700b010b0b040f151f157f15030a
03151b1b10031098401b102826a74428000133032f002f102f021404042f
032f9640041600183f1aed2b005f5e5d111733182f2b00183f1aed2b0018
10c45f5e5d12392f5d711aed2b3130592527060623222626353424253534
2626232206060723353e03333216161511141e0317152103060615141633
3236363502a50f529b57567f41012101262a422e2e43360dbd5c7a775e2f
799148060d141d28fe8c189b95443c2e5230830550483f704993a9165f5d
652920594fb6292c1d0c40907ffe7a424823150d0a4201d8046c683e4131
522e>ELRBAA+Cambria-Bold AddT42Char 
1 7458 155 <00010013fe4b044503e0002d00c1b10102435558403c182528031526121b
222c05161615a744160f1e00100f07010c03070b220b010d0b1d0b021104
040b030b041b08400715000f10031e1e1522282f1b1501182f3310c63211
3911173310d61acd003fcd2b005f5e5d5d1810c45f5e5d2f33333f2b1100
173311173331301b402d182528031526121b222c05161615a744160f1e00
100f07010c03070b220b010d0b1d0b021104040b030b40041b00183f1acd
2b005f5e5d5d1810c45f5e5d2f33333f2b11001733111733313059050e02
23222735331616333236363723012e022735211506061514171313363635
3426273521150e0307024e417385634b41700d2723263d4d3839fefb1c21
291e01f32f2c1a909f1414302c01851d231f2c262d91a55213e52f232a73
7202ef4f3b1f064242092424304dfe4b017f3049232a37074243091a2a53
5400>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/a 131 def
/y 155 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 97 /a put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[97{/.notdef}rp /a /b /.notdef /d /e /.notdef /g 
/.notdef /i /j /.notdef /l /.notdef /n /o 
2{/.notdef}rp /r /s /.notdef /u /.notdef /w /.notdef 
/y 5{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [20.04 0 0 -20.04 0 0 ]msf
22.2 46.4493 mo
(years\177)
[10.5612 10.6414 10.7215 9.23841 9.11819 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 1 GetGlyphDirectory
134 <001C60D8A8C9B790A84EF9E5920C93690E07A439556A40FB5BBF279D26E
0ABD5535F72BB6590CE76020D27C9E9F77C7EFCD986A770A76FF9033A60FE9AE
51BEAE1C37571E0B7B146FE5253374CF442334D42017C7C4005B949C3EDA0105
DF321E7A17D43D5746D38E5162F42275A1B59EF5107D4B6E5D6DE0870CF2F2F4
E63B72475F26CCE68747EC11A79C5BD9624906DE59656451B250257AFD864142
B45FEA43DBA955A7D68B82E69850103508BE39542C7B1226ED249B3073FBCA66
37A6DBC82A22563A5E3179B662DF95AE465ABE41B670753A87B2C6582D5186A0
87D6D4771751EECEECF1246A7D2D0440FACBE8765320B154F58EDCB0F03EDFB3
25BDE2483677523FD0929A95F34EDBCDD27D78FECD8BFE658BDD3D426A1> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
79.248 46.4493 mo
(\000\203\000\220\000\206\000\003\000\213\000\003)
[5.27719 5.99471 5.99464 2.16385 3.00288 0 ]xsh
grestore
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 2838 138 <0001003a000004870598003b008ab10102435558402827110e032a292aa7
441029153b1e1b031b031b954003103837a74438003a01088415153d3b20
843001182fe13212392fe1003f3f2b00183f1aed2b11003333183f332b11
00173331301b401d27110e032a292aa7441029153b1e1b031b031b954003
103837a744380000183f2b00183f1aed2b11003333183f332b1100173331
3059013636333216161511141e03171521353e023511342e022322060615
11141e04171521353e043511342e03273525331101d05b8f4b6e7837030c
15261bfe1b2f230d0d1f312826533703060b12221cfe161e22130e04030a
14262a01157d035c5143519879fe932c4d2e1d140742420b2a4a5f010564
6f3d1e2f512efe7c383d211a1612074242071319274540030c5651372114
08420efdc500>ELRBAA+Cambria-Bold AddT42Char 
1 3684 141 <0001003a000004d00598003c00b8b1010243555840362928a74429002b01
002c2c1303139e402c371a2c9e303039363736a744370f050818031b071a
1a1ba7441a001434390a063e2c14842101182fe13210d532c4321239002f
2b110033111733183f2b1100332b00182f1aed2b110033183f3f2b31301b
402b2928a74429002b01002c2c1303139e402c371a2c9e303039363736a7
44370f050818031b071a1a1ba7441a00182f2b110033111733183f2b1100
332b00182f1aed2b110033183f3f2b31305901011e021715213536353426
27272e02232315141616171521353e043511342e03273525331133323e04
353427352115060607031901023936281efe172d23334d1a201f1c300c25
33fe161e22130e04030a14262a01167c2123282b5a2e105701f427606702
77fe8255401b07424209261a474b74272312cc5f482b0d42420713192745
40030c565137211408420efcb50e1f513f2f16450c4040063c60>ELRBAA+Cambria-Bold AddT42Char 
1 6130 150 <00010025fff0030204da001c0094b10102435558402c1309a74407130f0f
010c030f134740100f1c400c10481c1c1803180318954003161212001410
140e0814840601182fe1c633113310c4392f003f1aed2b001810c62f2b3f
1aedcd5f5e5d11332b31301b40211309a74407130f0f010c030f13474010
0f1c400c10481c1c18031803189540031600183f1aed2b001810c62f2b3f
1aedcd5f5e5d11332b313059250606232226351123353e03373315211521
111416163332363637030258905095937d3d3a201305ef011dfee3153225
1c2c311b784b3da1a3022f450a28436c51fa7dfe3d716c330a1a1800>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/h 138 def
/k 141 def
/t 150 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 104 /h put
dup 107 /k put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[97{/.notdef}rp /a /b /.notdef /d /e /.notdef /g 
/h /i /j /k /l /.notdef /n /o 
2{/.notdef}rp /r /s /t /u /.notdef /w /.notdef 
/y 5{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [17.04 0 0 -17.04 0 0 ]msf
103.97 46.4493 mo
(dont\177)
[10.0877 9.47424 10.207 6.11746 0 ]xsh
FDXQRH+Cambria-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
144.79 46.4493 mo
(think\177)
[5.76164 9.35257 4.9156 9.4803 9.35248 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
188.02 46.4493 mo
(\000\213\000\003\000\212\000\203\000\230\000\207\000\003)
[3.00288 2.28529 5.99474 5.27719 5.39854 5.27719 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [15 0 0 -15 0 0 ]msf
217.54 46.4493 mo
(gotten\177)
[7.68007 8.39999 5.28009 5.40009 7.80008 8.88007 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
264.72 46.4493 mo
(\000\203\000\003)
[5.2796 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
6 61.2093 mo
(bad\177one\177)
[8.29769 7.51145 8.40996 10.6704 8.03088 8.48021 7.35704 0 ]xsh
grestore
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
75.648 61.2093 mo
(\000\213\000\220\000\003\000\226\000\212\000\207\000\003)
[3.11328 6.11614 9.10802 3.59901 6.0941 5.40968 0 ]xsh
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
2 2894 488 <000200b300000205055500030007001a400c03030207b00600050305af06
2fe1c610c6002ffdc63f3130010323030111211102055ba84f012afef305
55fc690397fbd9fed2012e00>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/exclam 488 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 33 /exclam put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[33{/.notdef}rp /exclam 63{/.notdef}rp /a /b /.notdef /d /e 
/.notdef /g /h /i /j /k /l /.notdef 
/n /o 2{/.notdef}rp /r /s /t /u /.notdef 
/w /.notdef /y 5{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [12.96 0 0 -12.96 0 0 ]msf
118.25 61.2093 mo
(lot\177)
[3.99166 7.28353 4.67862 0 ]xsh
FDXQRH+Cambria-Bold*1 [15 0 0 -15 0 0 ]msf
144.43 61.2093 mo
(!\177)
[5.0401 0 ]xsh
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
160.87 61.2093 mo
(\000\226\000\212\000\207\000\213\000\224\000\003)
[3.73149 6.0941 5.38759 3.13536 4.57059 0 ]xsh
FDXQRH+Cambria-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
192.94 61.2093 mo
(strong\177)
[7.32564 5.85741 7.35753 9.08125 9.63989 8.23543 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
252.36 61.2093 mo
(\000\203\000\220\000\206\000\003)
[5.38759 6.16031 6.09399 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 5148 146 <0002003cfe52046703f00023003100b5b101024355584034040706070307
a740061b15aa1313120312a740130f30172d1a2d032d95401a1021270327
984021161d832a2a331516240300840b01182fe1173212392fe1003f1aed
2b00183f1aed2b11003333183f1aed2b001810e53f1aed2b11003331301b
4028040706070307a740061b15aa1313120312a740130f30172d1a2d032d
95401a10212703279840211600183f1aed2b00183f1aed2b11003333183f
1aed2b001810e53f1aed2b11003331305905141616171521353e02351134
2e0327352533071736363332161514060623222711141633323635342623
2206061501cc102934fe0e2f2510030b14272601157b0f0c56954fb2b269
d098676355595c61575c2d5536b34b3e240c42420e223d4c036b473c2a1b
1408440891035349fbfaade9751a013e7b75c1b3c7c02e553500>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/p 146 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[33{/.notdef}rp /exclam 63{/.notdef}rp /a /b /.notdef /d /e 
/.notdef /g /h /i /j /k /l /.notdef 
/n /o /p /.notdef /r /s /t /u 
/.notdef /w /.notdef /y 5{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [15 0 0 -15 0 0 ]msf
6 74.5292 mo
(dependable\177)
[8.985 7.92009 8.985 7.92009 9.00006 8.985 8.02506 8.86504 4.69498 7.92009 0 ]xsh
grestore
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 2 GetGlyphDirectory
151 <001C60D8A8C9B7931DDF468CD82E3C0590560D062E1010AA77AE190EF42
7FDD223F2E984E9F806D6F9B42FAC919AE51CFD60B24AF84A31C8D98E5E2687D
CA5FA5C029408EEFEC49893C2257AD27EA47A228F507161E8386EE2217CFC441
BDC7D25DC9A91C87FAF773541D5D319797A168F15D7F84D788B845E7C431A158
21D6AC1CBD67D887231815BAC02562D11611F89A8722B9526AD61DECEF754293
9FFCC4BA226C0C0CF646EE2DB9CD9AB1277F1C3DC9463741BFBD4EA88E62E7DC
B087AC95CDE0553FD0726FD63E1EB84BFAAFAAC38859BE40B2110EC07E3B84BE
EEA02> |
146 <001C60D8A8C9B7EF322B68C9271AF6B33E844F008DD3D7802F36CADE353
A511C96D124C678E2D91913A8B2199791EAD8787DF6EB9182A150682AFE1158E
4027E6865EC54B9B236B76FA190B945BA07003530965677699D3AA5DE2AAB156
059602380BF17BB07FB541D7DC60A865B024796F0152DA296917B02DB624D6BC
E52141C3C2478E13FCE03843C4F047B2FD82DC81687CBED64854288C98274CA7
AC887B546C8D0970506C9C285EEBD0BFB7ABB51B652AE19FEC3288C57D41ADF6
03DD64C0B5C6B1B1B7F28AD3E8DC05D3BCB928F0287E2C0BCBBC0F44CC13CAF8
EB0C7FDC32E13278CEEAB0EFCAAB7076F50329C10E03E65AF24410317C619D1B
D677917902D6DBCFC16A31DDDACD6ED74026A8226538672050C354A10C57312D
C2F1B768E> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
97.968 74.5292 mo
(\000\203\000\220\000\206\000\003\000\205\000\203\000\220\000\003)
[5.3876 6.1603 6.094 8.26897 4.80234 5.38759 6.16031 0 ]xsh
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
148.51 74.5292 mo
(hold\177)
[8.38188 8.04492 4.32431 8.38187 0 ]xsh
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
187.66 74.5292 mo
(\000\227\000\222\000\003\000\226\000\221\000\003)
[6.0941 6.13824 8.28001 3.73148 5.8623 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
226.08 74.5292 mo
(alot\177)
[7.53954 4.19794 8.03088 5.04044 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
260.88 74.5292 mo
(\000\221\000\210\000\003)
[5.8623 3.25674 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 6642 152 <00010013fff6044503e0001e0067b10102435558401e010e11031d0f1a04
0b15051e1e1da7441e0f0718181707071d0b1120041d01182f3310c63211
39113333002f333f2b1100173311173331301b4014010e11031d0f1a040b
15051e1e1da7441e0f071800182f333f2b11001733111733313059011506
0615141713133636353426273521150e03070123012e02273502062f2c1a
909f1414302c01851d231f2c26fec8bdfef81b22291e03e042092424304d
fe4b017f3049232a37074243091a2a5354fd4d02f94f3b1f0642>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/v 152 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[33{/.notdef}rp /exclam 63{/.notdef}rp /a /b /.notdef /d /e 
/.notdef /g /h /i /j /k /l /.notdef 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y 5{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [12 0 0 -12 0 0 ]msf
6 89.1693 mo
(everyday\177)
[6.37207 6.37207 6.33607 5.53198 6.37207 7.164 6.48004 6.37207 0 ]xsh
grestore
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
59.664 89.1693 mo
(use\177)
[8.38188 6.48647 7.31493 0 ]xsh
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
85.368 89.1693 mo
(\000\203\000\220\000\206\000\003)
[5.3876 6.1603 6.094 0 ]xsh
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
105.41 89.1693 mo
(keep\177)
[8.31161 7.4132 7.31492 8.38188 0 ]xsh
FDXQRH+Cambria-Bold*1 [17.04 0 0 -17.04 0 0 ]msf
140.23 89.1693 mo
(going\177)
[8.63936 9.59352 5.16304 10.207 8.75862 0 ]xsh
FDXQRH+Cambria-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
187.66 89.1693 mo
(strong\177)
[7.19795 5.76164 7.19794 9.00145 9.4803 8.15564 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 1 GetGlyphDirectory
143 <001C60D8A8C9B6B5ED991E4C9DC34E68C0901E0207482749BB6EF346479
B341621DFAEE530AA406F9C13B576EC51ED4AE17A464E321ADC71B75D18978B0
1EF9CD564EF1C9CC28B7DED1C624CB05D7A89813E182CC0F0AEB1E70BA87EB09
36EDB297CEE4CD5B75E7DB37E554C98F64EDF295276D30A6317CEC7A6E23FAC8
BA6AFD6BBBBB7FE490A0E2862355ED1B87CEC4F9AFE46ABEC5B1A41460CE156E
E16CE2A76047C59BD5965F764BA17BA9B72B2D4F909CE821292C483AF5BA6537
FD671102CDEFB4614ADF70A0CF13961A8973B61D31B3389C0AEF627C835B77FB
19AA92FECDF0C4ED216D72FA1622221BCED8BFD3CE3870D236783F2B6858F408
7BADFCD6F6A4C645984B833EA7F6187C1B0651157BD3D4427D74DCFC32E1869B
0CF33B06843EBAAE4F4A3FBC030EC769635D5946628D1184611F8F1EA660A364
749C5B9C62ACDE00C0AB8CC0748AD01CD108EFF31D885B7BC573363097850CD5
7E397760F2E7872208CB89C810D9C3EB82F21D8034A628C81C643FA0C9D58554
7D528F8E110ECF1106EDA5A3BFC65FB74B07E15AE6B2DDB64A1BE06B5B4F4505
9E6C1B4C5AFE6F6401CE2DDD3B287135A6F4E69493A9993F0D715B486A867DAF
4C28896BCA35A33F828E28748749DC6A50188373EAD61CABE935D890DBF68FBA
B16582AB7EF5E6F90978915BC3C31F2DBF7DB59DA423B> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
238.92 89.1693 mo
(\000\213\000\003\000\203\000\217\000\003\000\213\000\220\000\003)
[3.00288 2.4288 5.25511 9.11906 2.28528 3.0029 5.99469 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
6 104.889 mo
(\000\226\000\212\000\207\000\003)
[3.73149 6.0941 5.38759 0 ]xsh
grestore
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 1220 133 <0001005bfff0039d03f0001e0072b10102435558401e100b800b13031398
400b100004041c031c95041610400f0001012018830701182fe112392f33
d61acd003fed2b001810c43f1aed2b001a1810cc31301b4015100b800b13
031398400b100004041c031c9540041600183f1aed2b001810c43f1aed2b
001a1810cc3130590117060623222635343636333216171523262623220e
021514161633323603504d62b76cd9e47dea9751a142c60f3c382543331e
2c62503a6701005d6053fff3a4ef7b1714f15e56255b997575a15732>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/c 133 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[33{/.notdef}rp /exclam 63{/.notdef}rp /a /b /c /d /e 
/.notdef /g /h /i /j /k /l /.notdef 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y 5{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
23.664 104.889 mo
(process\177)
[8.38188 6.47242 7.94664 6.58468 7.45532 6.36012 6.44435 0 ]xsh
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 1 GetGlyphDirectory
155 <001C60D8A8C9B7A3FAB2CE55FCC7A2C96F8B8106DA9F7F06305443AE25D
96E7EBBD73A7CF755E7671F780F6525D2B01ED08086CEAE554E2C489AF8AF836
11BB7E3B04B4E668864ED357CCDF532A5CAC10DBF57B47B22E8392D637D1B175
484DACF881EDFD4C0FF686A75954C0DC001578AB4A862BE10367FF0C848F08A2
1BFCC81B06EA79745D95CD7442C22643045F949230DAE45E75AF31A201D5D7C5
79FF8699C5EFAACCDCC0378BC4FDF884CC2B14C6C06315A5D618AF1DE6D69436
7CC3CF0E70A2C445077297ACAF346769508C656707EAF4CA16B0DF6D6B1A416A
0> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
77.448 104.889 mo
(\000\221\000\210\000\003)
[5.8801 3.36285 0 ]xsh
FDXQRH+Cambria-Bold*1 [18 0 0 -18 0 0 ]msf
89.088 104.889 mo
(redoing\177)
[8.29797 9.46811 10.782 10.242 5.59792 10.8721 9.36008 0 ]xsh
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
160.27 104.889 mo
(alot\177)
[7.53954 4.19794 8.03088 5.12468 0 ]xsh
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
189.34 104.889 mo
(\000\221\000\210\000\003\000\217\000\233\000\003)
[5.76294 3.34506 2.4288 9.21841 5.51997 0 ]xsh
FDXQRH+Cambria-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
218.02 104.889 mo
(old\177)
[9.08124 4.91566 9.52812 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: ELRBAA+Cambria-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ELRBAA+Cambria-Bold gcheck setglobal} if
1 2048 136 <0001003e00000326059c002500a6b1010243555840321340090c48130f80
0f16031698400f011e07a744051e47401b0f23002500a744251d1d1f1340
121f1b1f060c1f840404272611120139182fe133c6113310d61acd12392f
002f2b110033183f1aed322b00183f1aed2b001a1810cd2b31301b402113
40090c48130f800f16031698400f011e07a744051e47401b0f23002500a7
442500182f2b110033183f1aed322b00183f1aed2b001a1810cd2b313059
373e02351123353e03373636333217152326262322060615153315231114
1616171521542f25107a2f25180e0310ebd75643881129212b2e11c1c110
2934fe0e420e223d4c02684507111d2e24b4b90ecc373439695f4c7dfd98
4b3e240c4200>ELRBAA+Cambria-Bold AddT42Char 
ELRBAA+Cambria-Bold /CharStrings get begin
/f 136 def
end
ELRBAA+Cambria-Bold /Encoding get
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FDXQRH+Cambria-Bold*1 
[33{/.notdef}rp /exclam 63{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /.notdef 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y 5{/.notdef}rp /space 128{/.notdef}rp]
FDXQRH+Cambria-Bold nf
FDXQRH+Cambria-Bold*1 [12 0 0 -12 0 0 ]msf
246.72 104.889 mo
(files\177)
[3.94804 3.71996 3.69598 6.37207 5.508 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
6 120.609 mo
(\000\203\000\220\000\206\000\003)
[5.38759 6.16031 6.094 0 ]xsh
grestore
FDXQRH+Cambria-Bold*1 [15 0 0 -15 0 0 ]msf
28.224 120.609 mo
(updating\177)
[8.985 8.985 8.985 8.02506 5.52008 4.70993 8.97006 7.80006 0 ]xsh
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 1 GetGlyphDirectory
153 <001C60D8A8C9B6FB5FDE6E6E5681BA091134AE342CFFE268BD746F9B6F2
701AF59F8AA1C95CAA23F878BF2BBC81F63A233F9AD52F50FD4E4DC0EE507B4C
330BC67CF9E366845D5887D013CDC2EFD74AD628CF5C5EF59E60969F016A8696
EB181F6703D24EE425F0CE6099728EC1C6ADB20F7B8CC099F363716F925EC818
86F1C99942AAFAAEE07BABEB3A23195D999380D85D7BBCF153FE47884F61481E
9F76E084CEEF32D02AE5F451782BD> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
97.248 120.609 mo
(\000\226\000\212\000\207\000\217\000\003\000\231\000\213\000\226\000\212\000\003\000\226\000\212\000\207\000\003)
[3.59901 6.0941 5.31031 9.22945 4.54849 8.54498 3.06911 3.73151 6.12721 4.54849 3.73149 6.09412 
5.38757 0 ]xsh
FDXQRH+Cambria-Bold*1 [18 0 0 -18 0 0 ]msf
171.91 120.609 mo
(wilson\177)
[14.3641 5.65192 5.54398 8.26199 10.242 10.8721 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [14.04 0 0 -14.04 0 0 ]msf
235.56 120.609 mo
(jones\177)
[4.24011 7.87643 8.48022 7.45532 6.38818 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [17.04 0 0 -17.04 0 0 ]msf
6 137.889 mo
(binders\177)
[10.0707 5.38456 10.207 10.1729 9.04834 7.85542 7.82135 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
74.568 137.889 mo
(\000\203\000\003)
[5.40009 0 ]xsh
grestore
FDXQRH+Cambria-Bold*1 [17.04 0 0 -17.04 0 0 ]msf
84.408 137.889 mo
(project\177)
[10.0877 7.90653 9.69576 5.14612 8.91202 7.99165 6.27083 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
148.39 137.889 mo
(\000\226\000\212\000\203\000\226\000\003\000\212\000\203\000\225\000\003\000\204\000\207\000\207\000\220\000\003)
[3.73149 5.9837 5.38759 3.73149 4.42706 6.0941 5.40967 4.79128 4.42706 5.99469 5.38759 5.38759 
6.16031 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [20.04 0 0 -20.04 0 0 ]msf
219.82 137.889 mo
(years\177)
[10.5612 10.5612 10.7215 9.2384 9.07813 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [15 0 0 -15 0 0 ]msf
6 153.369 mo
(overdue\177)
[8.535 7.90509 7.92009 6.94498 8.985 8.985 7.92009 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
%ADOBeginSubsetFont: FDXQRG+Cambria-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FDXQRG+Cambria 1 GetGlyphDirectory
137 <001C60D8A8C9B7AD0A34E98C1E9A55CA52864A60BAE12AB13C188EAD209
B22B0747ECFB5344BF57CBE2E7EA729CD4173F1A0A4F15BB655B73DC9A821963
837CB2AF7E7270811405B69B4F3D73417073FE059BE8A3905C8491339C020B95
E061FD8D187971F26FB462A52DB1E0839F8E7B3C54CBC76F30615D2D798BACEB
D513518E7E0E4CD06FAB8F99FAE811AF70173D3CA3AEC1A23929365AE611DFBE
5515FBB1B919BB25B871663B4C5A5B2933DD8402478AFBD369654145A07D62DF
9CFECA589241C78AFA7C4D87ED632CEEAC9742D8D7F44FAAF558848B66C8FF99
34F0D26A0CBE63A61E870868AA7992D4E6FC5F989042CBB2EA95BA6C5F4EA89D
16583BF60E1B9537AE8B5D61093C97A6B15081B0412057C3E08930563D99089D
84289E5A243951FE3961EF6108C0E7F2989C1C39E4F9B47A0A74F5CB04BC0806
4130F3607FA02C58E3322BB0FD6D16E4BAF600FA44750F7A9EB682311078508C
BBB07815A0E4CF3985A6C308F7573180AE9B8EDEEF6CB493E69919D59F528A69
7FAB1BEBB912BC389844617AF6E120F895EF2A1FD3C4E01EC5851BCE76D593F4
D8FE7A6199EA4B85114F9B4> |
!
end
end end
%ADOEndSubsetFont
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
72.864 153.369 mo
(\000\203\000\220\000\206\000\003\000\226\000\212\000\207\000\233\000\003\000\203\000\224\000\207\000\003\000\206\000\221\000\213\000\220\000\211\000\003\000\203\000\003)
[5.3876 6.1603 6.094 7.30849 3.73149 5.9837 5.38759 5.56413 7.15393 5.38759 4.57059 5.38759 
7.31953 6.12712 5.75191 3.11328 6.11615 5.39859 7.3085 5.38757 0 ]xsh
grestore
FDXQRH+Cambria-Bold*1 [17.04 0 0 -17.04 0 0 ]msf
194.98 153.369 mo
(great\177)
[8.75864 7.90654 9.04834 9.11646 6.2197 0 ]xsh
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
246.6 153.369 mo
(job\177)
[4.81995 9.08124 9.48032 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [17.04 0 0 -17.04 0 0 ]msf
6 168.279 mo
(great\177binders\177)
[8.86087 7.92358 9.04834 9.11646 6.2197 3.6977 9.96846 5.35048 10.2922 10.1729 8.98018 7.90653 
7.82135 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [15 0 0 -15 0 0 ]msf
115.13 168.279 mo
(!\177)
[5.0401 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
123.43 168.279 mo
(strong\177)
[7.32563 5.85741 7.35754 9.08124 9.63991 8.34715 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
174.58 168.279 mo
(\000\203\000\220\000\206\000\003)
[5.38759 6.16031 6.09399 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [12.96 0 0 -12.96 0 0 ]msf
194.62 168.279 mo
(durable\177)
[7.78896 7.68529 5.97455 6.97252 7.65941 4.08238 6.84296 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
FDXQRH+Cambria-Bold*1 [15 0 0 -15 0 0 ]msf
244.68 168.279 mo
(!\177)
[5.0401 0 ]xsh
grestore
gsave
.84 172.359 mo
275.18 172.359 li
275.18 16.4593 li
.84 16.4593 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
252.96 168.279 mo
(\000\003)sh
grestore
.36 16.3293 mo
.84 16.3293 li
.84 15.8493 li
.36 15.8493 li
cp
ef
.84 16.3293 mo
275.18 16.3293 li
275.18 15.8493 li
.84 15.8493 li
cp
ef
275.18 16.3293 mo
275.66 16.3293 li
275.66 15.8493 li
275.18 15.8493 li
cp
ef
.36 172.359 mo
.84 172.359 li
.84 16.3392 li
.36 16.3392 li
cp
ef
.36 172.839 mo
.84 172.839 li
.84 172.359 li
.36 172.359 li
cp
ef
.36 172.839 mo
.84 172.839 li
.84 172.359 li
.36 172.359 li
cp
ef
.84 172.839 mo
275.18 172.839 li
275.18 172.359 li
.84 172.359 li
cp
ef
275.18 172.359 mo
275.66 172.359 li
275.66 16.3392 li
275.18 16.3392 li
cp
ef
275.18 172.839 mo
275.66 172.839 li
275.66 172.359 li
275.18 172.359 li
cp
ef
275.18 172.839 mo
275.66 172.839 li
275.66 172.359 li
275.18 172.359 li
cp
ef
gsave
4.111e-6 721.429 mo
275.88 721.429 li
275.88 -70.6907 li
4.111e-6 -70.6907 li
cp
eclp
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
6 183.399 mo
(\000\003)sh
grestore
/FDXQRG+Cambria-Identity-H findfont [11.04 0 0 -11.04 0 0 ]msf
150.07 183.399 mo
(\000\003)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/FDXQRG+Cambria-Identity-H uf
/FDXQRG+Cambria /CIDFont ur
/FDXQRH+Cambria-Bold*1 uf
/FDXQRH+Cambria-Bold uf
/ELRBAA+Cambria-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
